[{"E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\index.js":"1","E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\store.js":"2","E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\serviceWorker.js":"3","E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\App.js":"4","E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\components\\register.component.js":"5","E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\actions\\message.js":"6","E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\actions\\auth.js":"7","E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\components\\user.component.js":"8","E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\common\\EventBus.js":"9","E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\helpers\\history.js":"10","E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\components\\login.component.js":"11","E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\components\\profile.component.js":"12","E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\components\\JobManagementComponents\\AllJob.js":"13","E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\components\\EmployeeComponents\\EmployeeList.js":"14","E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\reducers\\index.js":"15","E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\components\\LeaveManagementComponents\\LeaveRequestComp\\LeaveRequestList.js":"16","E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\components\\LeaveManagementComponents\\TypeComp\\LeaveTypeListUsers.js":"17","E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\components\\LeaveManagementComponents\\TypeComp\\LeaveTypeList.js":"18","E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\components\\LeaveManagementComponents\\LeaveBalanceComp\\LeaveBalanceList.js":"19","E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\actions\\types.js":"20","E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\services\\auth.service.js":"21","E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\services\\user.service.js":"22","E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\reducers\\message.js":"23","E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\reducers\\auth.js":"24","E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\services\\auth-header.js":"25","E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\services\\hr.service.js":"26","E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\services\\Employee.service.js":"27","E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\components\\Attendancecomponents\\MarkAttendance.js":"28","E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\components\\Attendancecomponents\\UpdateAttendance.js":"29","E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\components\\Attendancecomponents\\SingleEmpAttendance.js":"30","E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\employeeNavbar.js":"31","E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\components\\EmployeeComponents\\UpdateEmployee.js":"32","E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\components\\EmployeeComponents\\AddEmployee.js":"33","E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\components\\EmployeeComponents\\EmployeeListUser.js":"34","E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\components\\LeaveManagementComponents\\TypeComp\\AddLeaveType.js":"35","E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\components\\LeaveManagementComponents\\TypeComp\\UpdateLeaveType.js":"36","E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\services\\employee.service.js":"37","E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\components\\Attendancecomponents\\AttendanceList.js":"38","E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\components\\Attendancecomponents\\PendingList.js":"39"},{"size":379,"mtime":1691139845947,"results":"40","hashOfConfig":"41"},{"size":354,"mtime":1691139845947,"results":"42","hashOfConfig":"41"},{"size":5227,"mtime":1691139845947,"results":"43","hashOfConfig":"41"},{"size":7446,"mtime":1692349084224,"results":"44","hashOfConfig":"41"},{"size":5124,"mtime":1691139845947,"results":"45","hashOfConfig":"41"},{"size":217,"mtime":1691139845934,"results":"46","hashOfConfig":"41"},{"size":1727,"mtime":1691139845934,"results":"47","hashOfConfig":"41"},{"size":1238,"mtime":1691139845947,"results":"48","hashOfConfig":"41"},{"size":340,"mtime":1691139845944,"results":"49","hashOfConfig":"41"},{"size":99,"mtime":1691139845947,"results":"50","hashOfConfig":"41"},{"size":4387,"mtime":1692154911892,"results":"51","hashOfConfig":"41"},{"size":970,"mtime":1692154911900,"results":"52","hashOfConfig":"41"},{"size":818,"mtime":1692155335225,"results":"53","hashOfConfig":"41"},{"size":4859,"mtime":1692154911876,"results":"54","hashOfConfig":"41"},{"size":166,"mtime":1691139845947,"results":"55","hashOfConfig":"41"},{"size":1873,"mtime":1692154911884,"results":"56","hashOfConfig":"41"},{"size":1525,"mtime":1691728193507,"results":"57","hashOfConfig":"41"},{"size":4316,"mtime":1692154911892,"results":"58","hashOfConfig":"41"},{"size":1660,"mtime":1691728193504,"results":"59","hashOfConfig":"41"},{"size":313,"mtime":1691139845944,"results":"60","hashOfConfig":"41"},{"size":1110,"mtime":1692154911900,"results":"61","hashOfConfig":"41"},{"size":358,"mtime":1692154911900,"results":"62","hashOfConfig":"41"},{"size":372,"mtime":1691139845947,"results":"63","hashOfConfig":"41"},{"size":1062,"mtime":1692590188459,"results":"64","hashOfConfig":"41"},{"size":756,"mtime":1692156883748,"results":"65","hashOfConfig":"41"},{"size":3717,"mtime":1692248981853,"results":"66","hashOfConfig":"41"},{"size":722,"mtime":1691928448285,"results":"67","hashOfConfig":"41"},{"size":2862,"mtime":1692541359624,"results":"68","hashOfConfig":"41"},{"size":3428,"mtime":1692590356242,"results":"69","hashOfConfig":"41"},{"size":6123,"mtime":1692587515055,"results":"70","hashOfConfig":"41"},{"size":18,"mtime":1692154520996,"results":"71","hashOfConfig":"41"},{"size":13000,"mtime":1692154911884,"results":"72","hashOfConfig":"41"},{"size":10956,"mtime":1692154911876,"results":"73","hashOfConfig":"41"},{"size":1084,"mtime":1692154911884,"results":"74","hashOfConfig":"41"},{"size":2720,"mtime":1692154911884,"results":"75","hashOfConfig":"41"},{"size":3520,"mtime":1692154911892,"results":"76","hashOfConfig":"41"},{"size":1542,"mtime":1692501781802,"results":"77","hashOfConfig":"41"},{"size":4145,"mtime":1692541329874,"results":"78","hashOfConfig":"41"},{"size":4028,"mtime":1692608223157,"results":"79","hashOfConfig":"41"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},"1nhted0",{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"83"},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"83"},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"83"},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"83"},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"136","messages":"137","suppressedMessages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"142","messages":"143","suppressedMessages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"83"},{"filePath":"149","messages":"150","suppressedMessages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"83"},{"filePath":"153","messages":"154","suppressedMessages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"83"},{"filePath":"157","messages":"158","suppressedMessages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"160","messages":"161","suppressedMessages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"163","messages":"164","suppressedMessages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"83"},{"filePath":"167","messages":"168","suppressedMessages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"171"},{"filePath":"172","messages":"173","suppressedMessages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","suppressedMessages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"178","messages":"179","suppressedMessages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"181","messages":"182","suppressedMessages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"184","messages":"185","suppressedMessages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"83"},{"filePath":"188","messages":"189","suppressedMessages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"83"},{"filePath":"192","messages":"193","suppressedMessages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"83"},{"filePath":"196","messages":"197","suppressedMessages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"199","messages":"200","suppressedMessages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"83"},{"filePath":"203","messages":"204","suppressedMessages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"206","messages":"207","suppressedMessages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"209","messages":"210","suppressedMessages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\index.js",[],[],[],"E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\store.js",[],[],"E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\serviceWorker.js",[],[],"E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\App.js",[],[],"E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\components\\register.component.js",[],[],"E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\actions\\message.js",[],[],"E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\actions\\auth.js",[],[],"E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\components\\user.component.js",["212","213","214","215"],[],"import React, { Component } from \"react\";\r\n\r\nimport UserService from \"../services/user.service\";\r\nimport EventBus from \"../common/EventBus\";\r\n\r\nexport default class User extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      content: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    UserService.getGreetings().then(\r\n      response => {\r\n        this.setState({\r\n          content: response.data.message\r\n        });\r\n      },\r\n      error => {\r\n        this.setState({\r\n          content:\r\n            (error.response &&\r\n              error.response.data &&\r\n              error.response.data.message) ||\r\n            error.message ||\r\n            error.toString()\r\n        });\r\n\r\n        if (error.response && error.response.status === 401) {\r\n          EventBus.dispatch(\"logout\");\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n\r\n\r\n        <div class=\"card bg-light text-dark\">\r\n        <h3>{this.state.content}</h3>\r\n        <a href=\"#\"><i class=\"fa fa-dribbble\"></i></a>\r\n        <a href=\"#\"><i class=\"fa fa-twitter\"></i></a>\r\n        <a href=\"#\"><i class=\"fa fa-linkedin\"></i></a>\r\n        <a href=\"#\"><i class=\"fa fa-facebook\"></i></a>\r\n          </div>\r\n     \r\n    );\r\n  }\r\n}","E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\common\\EventBus.js",[],[],"E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\helpers\\history.js",[],[],"E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\components\\login.component.js",["216","217"],[],"import React, { Component } from \"react\";\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport Form from \"react-validation/build/form\";\r\nimport Input from \"react-validation/build/input\";\r\nimport CheckButton from \"react-validation/build/button\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { login } from \"../actions/auth\";\r\n\r\nconst required = (value) => {\r\n  if (!value) {\r\n    return (\r\n      <div className=\"alert alert-danger\" role=\"alert\">\r\n        This field is required!\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nclass Login extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleLogin = this.handleLogin.bind(this);\r\n    this.onChangeUsername = this.onChangeUsername.bind(this);\r\n    this.onChangePassword = this.onChangePassword.bind(this);\r\n\r\n    this.state = {\r\n      username: \"\",\r\n      password: \"\",\r\n      loading: false,\r\n    };\r\n  }\r\n\r\n  onChangeUsername(e) {\r\n    this.setState({\r\n      username: e.target.value,\r\n    });\r\n  }\r\n\r\n  onChangePassword(e) {\r\n    this.setState({\r\n      password: e.target.value,\r\n    });\r\n  }\r\n\r\n  handleLogin(e) {\r\n    e.preventDefault();\r\n\r\n    this.setState({\r\n      loading: true,\r\n    });\r\n\r\n    this.form.validateAll();\r\n\r\n    const { dispatch, history } = this.props;\r\n\r\n    if (this.checkBtn.context._errors.length === 0) {\r\n      dispatch(login(this.state.username, this.state.password))\r\n        .then(() => {\r\n          // history.push(\"/profile\");\r\n          if (this.state.username == \"Admin\" && this.state.email == \"admin@gmail.com\") {\r\n            history.push(\"/admin-dashboard\");\r\n          } else {\r\n            history.push(\"/profile\");\r\n          }\r\n          window.location.reload();\r\n        })\r\n        .catch(() => {\r\n          this.setState({\r\n            loading: false\r\n          });\r\n        });\r\n    } else {\r\n      this.setState({\r\n        loading: false,\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { isLoggedIn, message } = this.props;\r\n\r\n    // if (isLoggedIn) {\r\n    //   return <Redirect to=\"/profile\" />;\r\n    // }\r\n\r\n    if (isLoggedIn) {\r\n      return <Redirect to={this.state.username === \"Admin\" && this.state.email === \"admin@gmail.com\" ? \"/admin-dashboard\" : \"/profile\"} />;\r\n    }\r\n\r\n    return (\r\n      <div className=\"col-md-12\">\r\n        <div className=\"card bg-light text-dark\">\r\n          <h1><center>Login</center></h1>\r\n\r\n\r\n          <Form\r\n            onSubmit={this.handleLogin}\r\n            ref={(c) => {\r\n              this.form = c;\r\n            }}\r\n          >\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"username\">Username</label>\r\n              <Input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                name=\"username\"\r\n                value={this.state.username}\r\n                onChange={this.onChangeUsername}\r\n                validations={[required]}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"password\">Password</label>\r\n              <Input\r\n                type=\"password\"\r\n                className=\"form-control\"\r\n                name=\"password\"\r\n                value={this.state.password}\r\n                onChange={this.onChangePassword}\r\n                validations={[required]}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n              <button\r\n                className=\"btn btn-dark btn-block\"\r\n                disabled={this.state.loading}\r\n              >\r\n                {this.state.loading && (\r\n                  <span className=\"spinner-border spinner-border-sm\"></span>\r\n                )}\r\n                <span>Login</span>\r\n              </button>\r\n            </div>\r\n\r\n            {message && (\r\n              <div className=\"form-group\">\r\n                <div className=\"alert alert-danger\" role=\"alert\">\r\n                  {message}\r\n                </div>\r\n              </div>\r\n            )}\r\n            <CheckButton\r\n              style={{ display: \"none\" }}\r\n              ref={(c) => {\r\n                this.checkBtn = c;\r\n              }}\r\n            />\r\n          </Form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  const { isLoggedIn } = state.auth;\r\n  const { message } = state.message;\r\n  return {\r\n    isLoggedIn,\r\n    message\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps)(Login);\r\n","E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\components\\profile.component.js",["218","219","220","221"],[],"import React, { Component } from \"react\";\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect } from \"react-redux\";\r\n\r\nclass Profile extends Component {\r\n\r\n\r\n  render() {\r\n\r\n    const { user: currentUser } = this.props;\r\n    if (!currentUser) {\r\n      return <Redirect to=\"/login\" />;\r\n    }\r\n\r\n    return (\r\n      <div class=\"card bg-light text-dark\">\r\n        <h1>{currentUser.username}</h1>\r\n        <p>\r\n          <strong>Id:</strong> {currentUser.id}\r\n        </p>\r\n        <p>\r\n          <strong>Email:</strong> {currentUser.email}\r\n        </p>\r\n        <a href=\"#\"><i class=\"fa fa-dribbble\"></i></a>\r\n        <a href=\"#\"><i class=\"fa fa-twitter\"></i></a>\r\n        <a href=\"#\"><i class=\"fa fa-linkedin\"></i></a>\r\n        <a href=\"#\"><i class=\"fa fa-facebook\"></i></a>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  const { user } = state.auth;\r\n  return {\r\n    user,\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps)(Profile);","E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\components\\JobManagementComponents\\AllJob.js",["222"],[],"import React from 'react'\r\n//import EmployeeService from '../../services/Employee.service';\r\nimport EmployeeService from '../../services/employee.service';\r\n\r\n\r\nimport { useEffect } from 'react';\r\nimport { useState } from 'react';\r\n\r\nconst AllJob = () => {\r\n    const [customer, setCustomer] = useState([])\r\n    useEffect(() => {\r\n\r\n  const user = JSON.parse(localStorage.getItem(\"user\"));\r\nconst token=user[\"accessToken\"];\r\n        getAllCustomerDetails(token);\r\n    }, []);\r\n\r\n    const getAllCustomerDetails = (token) => {\r\n        EmployeeService.getAllJobs(token).then((response) => {\r\n            setCustomer(response.data)\r\n            console.log(response.data);\r\n        }).catch(error =>{\r\n            console.log(error);\r\n        })\r\n    }\r\n  return (\r\n    <div>AllJob</div>\r\n  )\r\n}\r\n\r\nexport default AllJob","E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\components\\EmployeeComponents\\EmployeeList.js",[],[],"E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\reducers\\index.js",[],[],"E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\components\\LeaveManagementComponents\\LeaveRequestComp\\LeaveRequestList.js",[],[],"E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\components\\LeaveManagementComponents\\TypeComp\\LeaveTypeListUsers.js",[],[],"E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\components\\LeaveManagementComponents\\TypeComp\\LeaveTypeList.js",[],[],"E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\components\\LeaveManagementComponents\\LeaveBalanceComp\\LeaveBalanceList.js",[],[],"E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\actions\\types.js",[],[],"E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\services\\auth.service.js",["223"],[],"import axios from \"axios\";\r\n\r\nconst API_URL = \"http://localhost:8080/api/auth/\";\r\n\r\nclass AuthService {\r\n  login(username, password) {\r\n    return axios\r\n      .post(API_URL + \"signin\", { username, password })\r\n      .then((response) => {\r\n        if (response.data.accessToken) {\r\n\r\n          // Store the user details in local storage\r\n          localStorage.setItem(\"user\", JSON.stringify(response.data));\r\n\r\n          // Fetch the employee ID using the user's ID\r\n          axios.get(API_URL + \"getEmployeeId\", {\r\n            params: { userId: response.data.id }\r\n\r\n          }).then((employeeResponse) => {\r\n\r\n            // Store the employee ID in local storage\r\n            localStorage.setItem(\"employeeId\", employeeResponse.data);\r\n          });\r\n        }\r\n\r\n        return response.data;\r\n      });\r\n  }\r\n\r\n  logout() {\r\n    localStorage.removeItem(\"user\");\r\n    localStorage.removeItem(\"employeeId\");\r\n  }\r\n\r\n  register(username, email, password) {\r\n    return axios.post(API_URL + \"signup\", {\r\n      username,\r\n      email,\r\n      password,\r\n    });\r\n  }\r\n}\r\n\r\nexport default new AuthService();\r\n","E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\services\\user.service.js",["224"],[],"import axios from \"axios\";\r\nimport authHeader from \"./auth-header\";\r\n\r\nconst API_URL = \"http://localhost:8080/api/test/\";\r\n\r\nclass UserService {\r\n  getPublicContent() {\r\n    return axios.get(API_URL + \"all\");\r\n  }\r\n\r\n  getGreetings() {\r\n    return axios.get(API_URL + \"greeting\", { headers: authHeader() });\r\n  }\r\n  \r\n}\r\n\r\nexport default new UserService();\r\n","E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\reducers\\message.js",["225"],[],"import { SET_MESSAGE, CLEAR_MESSAGE } from \"../actions/types\";\r\n\r\nconst initialState = {};\r\n\r\nexport default function (state = initialState, action) {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case SET_MESSAGE:\r\n      return { message: payload };\r\n\r\n    case CLEAR_MESSAGE:\r\n      return { message: \"\" };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\reducers\\auth.js",["226","227"],[],"E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\services\\auth-header.js",[],[],"E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\services\\hr.service.js",["228","229"],[],"import axios from \"axios\";\r\nimport authHeader from \"./auth-header\";\r\n\r\nconst API_URL_EMP = \"http://localhost:8080/api/employees\";\r\nconst API_URL_TYPE = \"http://localhost:8080/api/leave-types\";\r\nconst API_URL_REQ = \"http://localhost:8080/api/leave-requests\";\r\nconst API_URL_BAL = \"http://localhost:8080/api/leave-balances\";\r\n\r\n//--\r\nconst API_URL_ATND=\"http://localhost:8080/api/attendance\";\r\nconst API_URL_MARKATND=\"http://localhost:8080/api/attendance/addattendance\";\r\nconst API_URL_MARK=\"http://localhost:8080/api/attendance\"\r\n//--\r\n\r\n\r\n\r\nconst API_URL_USER = \"http://localhost:8080/api/test\";\r\n\r\nclass HrService {\r\n\r\n//Employees\r\ngetAllEmployees() {\r\n  return axios.get(API_URL_EMP, { headers: authHeader() });\r\n}\r\n\r\nsaveEmployee(employee) {\r\n  return axios.post(API_URL_TYPE, employee, {headers: authHeader()})\r\n}\r\n\r\ngetEmployeeById(employeeId) {\r\n  return axios.get(`${API_URL_EMP}/${employeeId}`, { headers: authHeader() });\r\n}\r\n\r\nupdateEmployee(employeeId, updatedEmployeeData) {\r\n  const url = `${API_URL_EMP}/${employeeId}`;\r\n  return axios.put(url, updatedEmployeeData, { headers: authHeader() });\r\n}\r\n\r\ndeleteEmployee(employeeId) {\r\n  return axios.delete(`${API_URL_EMP}/${employeeId}`, { headers: authHeader() });\r\n}\r\n\r\n\r\n//Leave Types\r\ngetAllLeaveTypes() {\r\n  return axios.get(API_URL_TYPE, { headers: authHeader() });\r\n}\r\n\r\ngetAllLeaveRequest() {\r\n  return axios.get(API_URL_REQ, { headers: authHeader() });\r\n}\r\n\r\ngetLeaveTypeById(typeId) {\r\n  return axios.get(`${API_URL_TYPE}/${typeId}`, { headers: authHeader() });\r\n}\r\n\r\nupdateLeaveType(typeId, leaveTypeData) {\r\n  const url = `${API_URL_TYPE}/${typeId}`;\r\n  return axios.put(url, leaveTypeData, { headers: authHeader() });\r\n}\r\n\r\ndeleteLeaveType(typeId) {\r\n  return axios.delete(`${API_URL_TYPE}/${typeId}`, { headers: authHeader() });\r\n}\r\n\r\n//Leave Requests\r\ngetAllLeaveRequests() {\r\n  return axios.get(API_URL_REQ, { headers: authHeader() });\r\n}\r\n\r\ngetLeaveRequestsById(requestId) {\r\n  return axios.get(`${API_URL_REQ}/${requestId}`, { headers: authHeader() });\r\n}\r\n\r\n//Leave Balances\r\ngetAllLeaveBalances() {\r\n  return axios.get(API_URL_BAL, { headers: authHeader() });\r\n}\r\n//attendance\r\ngetAllAttendances(){\r\n    return axios.get(API_URL_ATND, {headers: authHeader() });\r\n}\r\n\r\n/*markAttendance(employeeId, typedata){\r\n    const url=`${API_URL_MARKATND}/${employeeId}`;\r\n    return axios.post(url, typedata, {headers: authHeader()});\r\n}*/\r\napproveAttendance(attendanceId) {\r\n  const url = `${API_URL_MARK}/approve/${attendanceId}`;\r\n  return axios.put(url, null, { headers: authHeader() })\r\n    .then(response => response.data)\r\n    .catch(error => {\r\n      throw error;\r\n    });\r\n}\r\n\r\nrejectAttendance(attendanceId) {\r\n  const url = `${API_URL_MARK}/reject/${attendanceId}`;\r\n  return axios.put(url, null, { headers: authHeader() })\r\n    .then(response => response.data)\r\n    .catch(error => {\r\n      throw error;\r\n    });\r\n}\r\n\r\ngetPendingAttendances() {\r\n  const url = `${API_URL_MARK}/pending`;\r\n  return axios.get(url, { headers: authHeader() })\r\n    .then(response => response.data)\r\n    .catch(error => {\r\n      throw error;\r\n    });\r\n}\r\n\r\n\r\nupdateAttendance(attendanceId, attendanceData){\r\n  const url=`${API_URL_ATND}/${attendanceId}`;\r\n  return axios.put(url, attendanceData, {headers: authHeader()});\r\n}\r\n\r\ngetAttendanceByEmployeeId(employeeId){\r\n   const url=`${API_URL_ATND}/${employeeId}`;\r\n   return axios.get(url, {headers: authHeader()} );\r\n}\r\n\r\n//---------\r\n\r\n\r\n//export default new HrService();\r\nsaveLeaveType(typedata) {\r\n  return axios.post(API_URL_TYPE, typedata, {headers: authHeader()});\r\n}\r\n\r\n//Users\r\ngetAllUsers() {\r\n  return axios.post(API_URL_USER, {headers: authHeader()});\r\n}\r\n\r\n}\r\n\r\nexport default new HrService();\r\n","E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\services\\Employee.service.js",["230"],[],"import axios from \"axios\";\r\nimport authHeader from \"./auth-header\";\r\n\r\nconst API_URL = \"http://localhost:8080/api/\";\r\nconst API_URL_ATND=\"http://localhost:8080/api/attendance\";\r\n\r\nclass EmployeeService {\r\n  \r\n  getAllEmployeeById(id) {\r\n    return axios.get(`${API_URL}employees/${id}`, { headers: authHeader() });\r\n  }\r\n\r\n  getAllJobs(token){\r\n    console.log(\"dfdsf\");\r\n     return axios.get(API_URL+'Jobs/viewJob',{headers:{\"Authorization\":`Bearer ${token}`}});\r\n  }\r\n\r\n\r\n  getAttendanceByEmployeeId(employeeId){\r\n    console.log(\"Emmployee service is calling..\")\r\n    const url=`${API_URL_ATND}/${employeeId}`;\r\n    return axios.get(url, {headers: authHeader()} );\r\n }\r\n  \r\n}\r\n\r\nexport default new EmployeeService();\r\n",[],"E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\components\\Attendancecomponents\\MarkAttendance.js",[],[],"E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\components\\Attendancecomponents\\UpdateAttendance.js",["231"],[],"E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\components\\Attendancecomponents\\SingleEmpAttendance.js",["232"],[],"E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\employeeNavbar.js",[],[],"E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\components\\EmployeeComponents\\UpdateEmployee.js",["233"],[],"import React, { useState, useEffect } from \"react\";\r\nimport { Redirect, Link, useParams } from \"react-router-dom\";\r\nimport HrService from \"../../services/hr.service\";\r\nimport {\r\n    Card, CardContent, CardHeader, TextField, Button, Grid, Box, MenuItem, FormControl, InputLabel, Select,\r\n} from \"@mui/material\";\r\nimport { Update } from \"@mui/icons-material\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\n\r\nfunction UpdateEmployee(props) {\r\n    const [employee, setEmployee] = useState({});\r\n    const { employeeId } = useParams();\r\n    const [updateSuccess, setUpdateSuccess] = useState(false);\r\n    const { user: currentUser } = props;\r\n\r\n    useEffect(() => {\r\n        HrService.getEmployeeById(employeeId)\r\n            .then((response) => {\r\n                console.log(\"Employee data:\", response.data);\r\n                setEmployee(response.data);\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            });\r\n    }, [employeeId]);\r\n\r\n    // Validate email format\r\n    function isValidEmail(email) {\r\n        const regex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n        return regex.test(email);\r\n    }\r\n\r\n    const handleFieldChange = (fieldName, value) => {\r\n        setEmployee((prevEmployee) => ({\r\n            ...prevEmployee,\r\n            [fieldName]: value,\r\n        }));\r\n    };\r\n\r\n    const handleUpdate = () => {\r\n        // Validate the phone number\r\n        if (employee.phoneNumber && employee.phoneNumber.length !== 10) {\r\n            alert(\"Phone number must be 10 digits.\");\r\n            return;\r\n        }\r\n\r\n        // Validate email format\r\n        if (employee.email && !isValidEmail(employee.email)) {\r\n            alert(\"Invalid email format.\");\r\n            return;\r\n        }\r\n\r\n        HrService.updateEmployee(employeeId, employee)\r\n            .then(() => {\r\n                setUpdateSuccess(true);\r\n            })\r\n            .catch((error) => {\r\n                console.log(\"Error updating employee:\", error);\r\n            });\r\n    };\r\n\r\n    if (updateSuccess) {\r\n        return <Redirect to=\"/employee-list\" />;\r\n    }\r\n\r\n    if (!currentUser) {\r\n        return <Redirect to=\"/login\" />;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Card>\r\n                <CardHeader className=\"title\" title=\"Employee Details\" />\r\n                <CardContent>\r\n                    <Grid container spacing={3}>\r\n                    <Grid item xs={12} md={6}>\r\n                            <TextField\r\n                                label=\"User Id\"\r\n                                value={employee.userId || \"\"}\r\n                                onChange={(e) => handleFieldChange(\"userId\", e.target.value)}\r\n                                fullWidth\r\n                                disabled\r\n                                variant=\"outlined\"\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} md={6}>\r\n                            <TextField\r\n                                label=\"Email\"\r\n                                value={employee.email || \"\"}\r\n                                onChange={(e) => handleFieldChange(\"email\", e.target.value)}\r\n                                fullWidth\r\n                                disabled\r\n                                variant=\"outlined\"\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} md={6}>\r\n                            <TextField\r\n                                label=\"Username\"\r\n                                value={employee.username || \"\"}\r\n                                onChange={(e) => handleFieldChange(\"username\", e.target.value)}\r\n                                fullWidth\r\n                                disabled\r\n                                variant=\"outlined\"\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} md={6}>\r\n                            <TextField\r\n                                label=\"First Name\"\r\n                                value={employee.fname || \"\"}\r\n                                onChange={(e) => handleFieldChange(\"fname\", e.target.value)}\r\n                                fullWidth\r\n                                variant=\"outlined\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} md={6}>\r\n                            <TextField\r\n                                label=\"Last Name\"\r\n                                value={employee.lname || \"\"}\r\n                                onChange={(e) => handleFieldChange(\"lname\", e.target.value)}\r\n                                fullWidth\r\n                                variant=\"outlined\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} md={6}>\r\n                            <FormControl fullWidth variant=\"outlined\">\r\n                                <InputLabel>Gender</InputLabel>\r\n                                <Select\r\n                                    label=\"Gender\"\r\n                                    value={employee.gender || \"\"}\r\n                                    onChange={(e) => handleFieldChange(\"gender\", e.target.value)}\r\n                                >\r\n                                    <MenuItem value=\"Female\">Female</MenuItem>\r\n                                    <MenuItem value=\"Male\">Male</MenuItem>\r\n                                    <MenuItem value=\"Other\">Other</MenuItem>\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={12} md={6}>\r\n                            <TextField\r\n                                label=\"Date of Birth\"\r\n                                type=\"date\" // Use type \"date\" for date picker input\r\n                                value={employee.dob || \"\"}\r\n                                onChange={(e) => handleFieldChange(\"dob\", e.target.value)}\r\n                                fullWidth\r\n                                variant=\"outlined\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} md={6}>\r\n                            <TextField\r\n                                label=\"Department\"\r\n                                value={employee.department || \"\"}\r\n                                onChange={(e) => handleFieldChange(\"department\", e.target.value)}\r\n                                fullWidth\r\n                                variant=\"outlined\"\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} md={6}>\r\n                            <TextField\r\n                                label=\"Phone No\"\r\n                                value={employee.phoneNumber || \"\"}\r\n                                onChange={(e) => handleFieldChange(\"phoneNumber\", e.target.value)}\r\n                                fullWidth\r\n                                variant=\"outlined\"\r\n                            />\r\n                        </Grid>\r\n\r\n\r\n                        <Grid item xs={12} md={6}>\r\n                            <TextField\r\n                                label=\"Date of Joining\"\r\n                                type=\"date\" // Use type \"date\" for date picker input\r\n                                value={employee.doJoining || \"\"}\r\n                                onChange={(e) => handleFieldChange(\"doJoining\", e.target.value)}\r\n                                fullWidth\r\n                                variant=\"outlined\"\r\n                            />\r\n                        </Grid>\r\n\r\n\r\n                        <Grid item xs={12} md={6}>\r\n                            <TextField\r\n                                label=\"Job Title\"\r\n                                value={employee.jobTitle || \"\"}\r\n                                onChange={(e) => handleFieldChange(\"jobTitle\", e.target.value)}\r\n                                fullWidth\r\n                                variant=\"outlined\"\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} md={6}>\r\n                            <TextField\r\n                                label=\"Address\"\r\n                                value={employee.address || \"\"}\r\n                                onChange={(e) => handleFieldChange(\"address\", e.target.value)}\r\n                                fullWidth\r\n                                variant=\"outlined\"\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} md={6}>\r\n                            <TextField\r\n                                label=\"Permanent Address\"\r\n                                value={employee.paddress || \"\"}\r\n                                onChange={(e) => handleFieldChange(\"paddress\", e.target.value)}\r\n                                fullWidth\r\n                                variant=\"outlined\"\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} md={6}>\r\n                            <TextField\r\n                                label=\"Addhar/Pan Card number\"\r\n                                value={employee.idNo || \"\"}\r\n                                onChange={(e) => handleFieldChange(\"idNo\", e.target.value)}\r\n                                fullWidth\r\n                                variant=\"outlined\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} md={6}>\r\n                            <FormControl fullWidth variant=\"outlined\">\r\n                                <InputLabel>Employee Status</InputLabel>\r\n                                <Select\r\n                                    value={employee.employeeStatus || \"\"}\r\n                                    onChange={(e) =>\r\n                                        handleFieldChange(\"employeeStatus\", e.target.value)\r\n                                    }\r\n                                    label=\"Employee Status\"\r\n                                >\r\n                                    <MenuItem value=\"Active\">Active</MenuItem>\r\n                                    <MenuItem value=\"InActive\">InActive</MenuItem>\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={12} md={6}>\r\n                            <TextField\r\n                                label=\"Date of Leaving\"\r\n                                type=\"date\" // Use type \"date\" for date picker input\r\n                                value={employee.doLeaving || \"\"}\r\n                                onChange={(e) => handleFieldChange(\"doLeaving\", e.target.value)}\r\n                                fullWidth\r\n                                variant=\"outlined\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} md={6}>\r\n                            <TextField\r\n                                label=\"Employee Picture\"\r\n                                value={employee.employeePic || \"\"}\r\n                                onChange={(e) => handleFieldChange(\"employeePic\", e.target.value)}\r\n                                fullWidth\r\n                                variant=\"outlined\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} md={6}>\r\n                            <TextField\r\n                                label=\"Resume\"\r\n                                value={employee.resume || \"\"}\r\n                                onChange={(e) => handleFieldChange(\"resume\", e.target.value)}\r\n                                fullWidth\r\n                                variant=\"outlined\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} md={6}>\r\n                            <TextField\r\n                                label=\"Other\"\r\n                                value={employee.other || \"\"}\r\n                                onChange={(e) => handleFieldChange(\"other\", e.target.value)}\r\n                                fullWidth\r\n                                variant=\"outlined\"\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    <br />\r\n                    <Box display=\"flex\" justifyContent=\"flex-end\">\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            startIcon={<Update />}\r\n                            onClick={handleUpdate}\r\n                        >\r\n                            Update\r\n                        </Button>\r\n                    </Box>\r\n                </CardContent>\r\n            </Card>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UpdateEmployee;\r\n","E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\components\\EmployeeComponents\\AddEmployee.js",["234"],[],"import React, { useState } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport HrService from \"../../services/hr.service\";\r\nimport {\r\n    Card, CardContent, CardHeader, TextField, Button, Grid, Box, MenuItem, FormControl, InputLabel, Select,\r\n} from \"@mui/material\";\r\nimport { Add } from \"@mui/icons-material\";\r\nimport { DatePicker } from '@mui/lab/DatePicker';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nfunction AddEmployee(props) {\r\n    const [employee, setEmployee] = useState({});\r\n    const [addSuccess, setAddSuccess] = useState(false);\r\n    const { user: currentUser } = props;\r\n\r\n    // Validate email format\r\n    function isValidEmail(email) {\r\n        const regex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n        return regex.test(email);\r\n    }\r\n\r\n    const handleFieldChange = (fieldName, value) => {\r\n        setEmployee((prevEmployee) => ({\r\n            ...prevEmployee,\r\n            [fieldName]: value,\r\n        }));\r\n    };\r\n\r\n    const handleAdd = () => {\r\n        // Validate the phone number\r\n        if (employee.phoneNumber && employee.phoneNumber.length !== 10) {\r\n            alert(\"Phone number must be 10 digits.\");\r\n            return;\r\n        }\r\n\r\n        // Validate email format\r\n        if (employee.email && !isValidEmail(employee.email)) {\r\n            alert(\"Invalid email format.\");\r\n            return;\r\n        }\r\n\r\n        HrService.saveEmployee(employee)\r\n            .then(() => {\r\n                setAddSuccess(true);\r\n            })\r\n            .catch((error) => {\r\n                console.log(\"Error adding employee:\", error);\r\n            });\r\n\r\n    };\r\n\r\n    if (addSuccess) {\r\n        return <Redirect to=\"/employee-list\" />;\r\n    }\r\n\r\n    if (!currentUser) {\r\n        return <Redirect to=\"/login\" />;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Card>\r\n                <CardHeader className=\"title\" title=\"Add New Employee\" />\r\n                <CardContent>\r\n                    <Grid container spacing={3}>\r\n                        <Grid item xs={12} md={6}>\r\n                            <TextField\r\n                                label=\"First Name\"\r\n                                value={employee.fname || \"\"}\r\n                                onChange={(e) => handleFieldChange(\"fname\", e.target.value)}\r\n                                fullWidth\r\n                                variant=\"outlined\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} md={6}>\r\n                            <TextField\r\n                                label=\"Last Name\"\r\n                                value={employee.lname || \"\"}\r\n                                onChange={(e) => handleFieldChange(\"lname\", e.target.value)}\r\n                                fullWidth\r\n                                variant=\"outlined\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} md={6}>\r\n                            <FormControl fullWidth variant=\"outlined\">\r\n                                <InputLabel>Gender</InputLabel>\r\n                                <Select\r\n                                    label=\"Gender\"\r\n                                    value={employee.gender || \"\"}\r\n                                    onChange={(e) => handleFieldChange(\"gender\", e.target.value)}\r\n                                >\r\n                                    <MenuItem value=\"Female\">Female</MenuItem>\r\n                                    <MenuItem value=\"Male\">Male</MenuItem>\r\n                                    <MenuItem value=\"Other\">Other</MenuItem>\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={12} md={6}>\r\n                            <TextField\r\n                                label=\"Date of Birth\"\r\n                                type=\"date\"\r\n                                value={employee.dob || \"\"}\r\n                                onChange={(e) => handleFieldChange(\"dob\", e.target.value)}\r\n                                fullWidth\r\n                                variant=\"outlined\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} md={6}>\r\n                            <TextField\r\n                                label=\"Department\"\r\n                                value={employee.department || \"\"}\r\n                                onChange={(e) => handleFieldChange(\"department\", e.target.value)}\r\n                                fullWidth\r\n                                variant=\"outlined\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} md={6}>\r\n                            <TextField\r\n                                label=\"Email\"\r\n                                value={employee.email || \"\"}\r\n                                onChange={(e) => handleFieldChange(\"email\", e.target.value)}\r\n                                fullWidth\r\n                                variant=\"outlined\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} md={6}>\r\n                            <TextField\r\n                                label=\"Phone No\"\r\n                                value={employee.phoneNumber || \"\"}\r\n                                onChange={(e) => handleFieldChange(\"phoneNumber\", e.target.value)}\r\n                                fullWidth\r\n                                variant=\"outlined\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} md={6}>\r\n                            <TextField\r\n                                label=\"Date of Joining\"\r\n                                type=\"date\"\r\n                                value={employee.doJoining || \"\"}\r\n                                onChange={(e) => handleFieldChange(\"doJoining\", e.target.value)}\r\n                                fullWidth\r\n                                variant=\"outlined\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} md={6}>\r\n                            <TextField\r\n                                label=\"Job Title\"\r\n                                value={employee.jobTitle || \"\"}\r\n                                onChange={(e) => handleFieldChange(\"jobTitle\", e.target.value)}\r\n                                fullWidth\r\n                                variant=\"outlined\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} md={6}>\r\n                            <TextField\r\n                                label=\"Address\"\r\n                                value={employee.address || \"\"}\r\n                                onChange={(e) => handleFieldChange(\"address\", e.target.value)}\r\n                                fullWidth\r\n                                variant=\"outlined\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} md={6}>\r\n                            <TextField\r\n                                label=\"Permanent Address\"\r\n                                value={employee.paddress || \"\"}\r\n                                onChange={(e) => handleFieldChange(\"paddress\", e.target.value)}\r\n                                fullWidth\r\n                                variant=\"outlined\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} md={6}>\r\n                            <TextField\r\n                                label=\"Addhar/Pan Card number\"\r\n                                value={employee.idNo || \"\"}\r\n                                onChange={(e) => handleFieldChange(\"idNo\", e.target.value)}\r\n                                fullWidth\r\n                                variant=\"outlined\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} md={6}>\r\n                            <FormControl fullWidth variant=\"outlined\">\r\n                                <InputLabel>Employee Status</InputLabel>\r\n                                <Select\r\n                                    value={employee.employeeStatus || \"\"}\r\n                                    onChange={(e) =>\r\n                                        handleFieldChange(\"employeeStatus\", e.target.value)\r\n                                    }\r\n                                    label=\"Employee Status\"\r\n                                >\r\n                                    <MenuItem value=\"Active\">Active</MenuItem>\r\n                                    <MenuItem value=\"InActive\">InActive</MenuItem>\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={12} md={6}>\r\n                            <TextField\r\n                                label=\"Date of Leaving\"\r\n                                type=\"date\"\r\n                                value={employee.doLeaving || \"\"}\r\n                                onChange={(e) => handleFieldChange(\"doLeaving\", e.target.value)}\r\n                                fullWidth\r\n                                variant=\"outlined\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} md={6}>\r\n                            <TextField\r\n                                label=\"Employee Picture\"\r\n                                value={employee.employeePic || \"\"}\r\n                                onChange={(e) => handleFieldChange(\"employeePic\", e.target.value)}\r\n                                fullWidth\r\n                                variant=\"outlined\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} md={6}>\r\n                            <TextField\r\n                                label=\"Resume\"\r\n                                value={employee.resume || \"\"}\r\n                                onChange={(e) => handleFieldChange(\"resume\", e.target.value)}\r\n                                fullWidth\r\n                                variant=\"outlined\"\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    <br />\r\n                    <Box display=\"flex\" justifyContent=\"flex-end\">\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            startIcon={<Add />}\r\n                            onClick={handleAdd}\r\n                        >\r\n                            Add Employee\r\n                        </Button>\r\n                    </Box>\r\n                </CardContent>\r\n            </Card>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AddEmployee;\r\n","E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\components\\EmployeeComponents\\EmployeeListUser.js",["235","236","237","238"],[],"import React, { useState, useEffect } from \"react\";\r\nimport { Redirect, Link } from 'react-router-dom';\r\nimport HrService from \"../../services/hr.service\";\r\n\r\nfunction EmployeeListUser(props) {\r\n  const [employees, setEmployees] = useState([]);\r\n  const { user: currentUser } = props;\r\n\r\n  useEffect(() => {\r\n    console.log(currentUser);\r\n    // if (currentUser && currentUser.employeeId) {\r\n    //   // Use currentUser.employeeId to identify the user's employeeId\r\n    //   HrService.getEmployeeById(currentUser.employeeId)\r\n    //     .then((response) => {\r\n    //       console.log(\"Employee data:\", response.data);\r\n    //       console.log(currentUser);\r\n    //       setEmployees(response.data);\r\n    //     })\r\n    //     .catch((error) => {\r\n    //       console.log(error);\r\n    //     });\r\n    // }\r\n  }, [currentUser]);\r\n\r\n  if (!currentUser) {\r\n    return <Redirect to=\"/login\" />;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Employee List for a particular user</h1>\r\n      {/* Render the list of employees here */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EmployeeListUser;\r\n","E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\components\\LeaveManagementComponents\\TypeComp\\AddLeaveType.js",[],[],"E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\components\\LeaveManagementComponents\\TypeComp\\UpdateLeaveType.js",["239"],[],"import React, { useState, useEffect } from \"react\";\r\nimport { Redirect, useParams } from \"react-router-dom\";\r\nimport HrService from \"../../../services/hr.service\";\r\nimport { TextField, Button, Box, Card, CardContent, CardActions, CardHeader } from \"@mui/material\";\r\nimport { Done } from \"@mui/icons-material\";\r\n\r\nfunction UpdateLeaveType(props) {\r\n    const { user: currentUser } = props;\r\n    const { typeId } = useParams();\r\n    const [leaveType, setLeaveType] = useState({});\r\n    const [leaveTypeName, setLeaveTypeName] = useState(\"\");\r\n    const [leaveTypeAllowedCount, setLeaveTypeAllowedCount] = useState(0);\r\n    const [redirectToList, setRedirectToList] = useState(false);\r\n\r\n    useEffect(() => {\r\n        HrService.getLeaveTypeById(typeId)\r\n            .then((response) => {\r\n                const leaveTypeData = response.data;\r\n                setLeaveType(leaveTypeData);\r\n                setLeaveTypeName(leaveTypeData.typeName);\r\n                setLeaveTypeAllowedCount(leaveTypeData.countAllowed);\r\n            })\r\n            .catch((error) => {\r\n                console.log(\"Error fetching leave type details:\", error);\r\n            });\r\n    }, [typeId]);\r\n\r\n    const handleUpdateLeaveType = () => {\r\n        const updatedLeaveType = {\r\n            typeId: leaveType.typeId,\r\n            typeName: leaveTypeName,\r\n            countAllowed: leaveTypeAllowedCount,\r\n        };\r\n\r\n        HrService.updateLeaveType(leaveType.typeId, updatedLeaveType)\r\n            .then((response) => {\r\n                setRedirectToList(true);\r\n            })\r\n            .catch((error) => {\r\n                console.log(\"Error updating leave type:\", error);\r\n            });\r\n    };\r\n\r\n    if (!currentUser) {\r\n        return <Redirect to=\"/login\" />;\r\n    }\r\n\r\n    if (redirectToList) {\r\n        return <Redirect to=\"/leave-types\" />;\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <Card>\r\n                <CardHeader title={`Update Leave Type - ${leaveType.typeName}`} />\r\n                <CardContent>\r\n                    <form>\r\n                        <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\r\n                            <TextField\r\n                                label=\"Leave Type Name\"\r\n                                variant=\"outlined\"\r\n                                value={leaveTypeName}\r\n                                onChange={(e) => setLeaveTypeName(e.target.value)}\r\n                                style={{ marginBottom: \"20px\" }}\r\n                            />\r\n                            <TextField\r\n                                label=\"Allowed Count\"\r\n                                type=\"number\"\r\n                                variant=\"outlined\"\r\n                                value={leaveTypeAllowedCount}\r\n                                onChange={(e) => setLeaveTypeAllowedCount(e.target.value)}\r\n                                style={{ marginBottom: \"20px\" }}\r\n                            />\r\n                            <Button\r\n                                variant=\"outlined\"\r\n                                color=\"success\"\r\n                                startIcon={<Done />}\r\n                                onClick={handleUpdateLeaveType}\r\n                            >\r\n                                Update Leave Type\r\n                            </Button>\r\n                        </Box>\r\n                    </form>\r\n                </CardContent>\r\n            </Card>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UpdateLeaveType;","E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\services\\employee.service.js",["240","241"],[],"E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\components\\Attendancecomponents\\AttendanceList.js",[],[],"E:\\Final Capstone Project\\Repository\\Final_Capstone_Project\\Frontend\\src\\components\\Attendancecomponents\\PendingList.js",[],[],{"ruleId":"242","severity":1,"message":"243","line":45,"column":9,"nodeType":"244","endLine":45,"endColumn":21},{"ruleId":"242","severity":1,"message":"243","line":46,"column":9,"nodeType":"244","endLine":46,"endColumn":21},{"ruleId":"242","severity":1,"message":"243","line":47,"column":9,"nodeType":"244","endLine":47,"endColumn":21},{"ruleId":"242","severity":1,"message":"243","line":48,"column":9,"nodeType":"244","endLine":48,"endColumn":21},{"ruleId":"245","severity":1,"message":"246","line":62,"column":35,"nodeType":"247","messageId":"248","endLine":62,"endColumn":37},{"ruleId":"245","severity":1,"message":"246","line":62,"column":66,"nodeType":"247","messageId":"248","endLine":62,"endColumn":68},{"ruleId":"242","severity":1,"message":"243","line":24,"column":9,"nodeType":"244","endLine":24,"endColumn":21},{"ruleId":"242","severity":1,"message":"243","line":25,"column":9,"nodeType":"244","endLine":25,"endColumn":21},{"ruleId":"242","severity":1,"message":"243","line":26,"column":9,"nodeType":"244","endLine":26,"endColumn":21},{"ruleId":"242","severity":1,"message":"243","line":27,"column":9,"nodeType":"244","endLine":27,"endColumn":21},{"ruleId":"249","severity":1,"message":"250","line":10,"column":12,"nodeType":"251","messageId":"252","endLine":10,"endColumn":20},{"ruleId":"253","severity":1,"message":"254","line":44,"column":1,"nodeType":"255","endLine":44,"endColumn":34},{"ruleId":"253","severity":1,"message":"254","line":17,"column":1,"nodeType":"255","endLine":17,"endColumn":34},{"ruleId":"253","severity":1,"message":"256","line":5,"column":1,"nodeType":"255","endLine":18,"endColumn":2},{"ruleId":"249","severity":1,"message":"257","line":10,"column":7,"nodeType":"251","messageId":"252","endLine":10,"endColumn":17},{"ruleId":"253","severity":1,"message":"256","line":16,"column":1,"nodeType":"255","endLine":51,"endColumn":2},{"ruleId":"249","severity":1,"message":"258","line":11,"column":7,"nodeType":"251","messageId":"252","endLine":11,"endColumn":23},{"ruleId":"253","severity":1,"message":"254","line":141,"column":1,"nodeType":"255","endLine":141,"endColumn":32},{"ruleId":"253","severity":1,"message":"254","line":27,"column":1,"nodeType":"255","endLine":27,"endColumn":38},{"ruleId":"249","severity":1,"message":"259","line":30,"column":10,"nodeType":"251","messageId":"252","endLine":30,"endColumn":20},{"ruleId":"249","severity":1,"message":"260","line":4,"column":90,"nodeType":"251","messageId":"252","endLine":4,"endColumn":99},{"ruleId":"249","severity":1,"message":"261","line":2,"column":20,"nodeType":"251","messageId":"252","endLine":2,"endColumn":24},{"ruleId":"249","severity":1,"message":"262","line":8,"column":10,"nodeType":"251","messageId":"252","endLine":8,"endColumn":20},{"ruleId":"249","severity":1,"message":"261","line":2,"column":20,"nodeType":"251","messageId":"252","endLine":2,"endColumn":24},{"ruleId":"249","severity":1,"message":"263","line":3,"column":8,"nodeType":"251","messageId":"252","endLine":3,"endColumn":17},{"ruleId":"249","severity":1,"message":"264","line":6,"column":10,"nodeType":"251","messageId":"252","endLine":6,"endColumn":19},{"ruleId":"249","severity":1,"message":"265","line":6,"column":21,"nodeType":"251","messageId":"252","endLine":6,"endColumn":33},{"ruleId":"249","severity":1,"message":"266","line":4,"column":53,"nodeType":"251","messageId":"252","endLine":4,"endColumn":64},{"ruleId":"249","severity":1,"message":"267","line":6,"column":7,"nodeType":"251","messageId":"252","endLine":6,"endColumn":18},{"ruleId":"253","severity":1,"message":"254","line":52,"column":1,"nodeType":"255","endLine":52,"endColumn":38},"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'customer' is assigned a value but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign instance to a variable before exporting as module default","ExportDefaultDeclaration","Unexpected default export of anonymous function","'employeeId' is assigned a value but never used.","'API_URL_MARKATND' is assigned a value but never used.","'attendance' is assigned a value but never used.","'TextField' is defined but never used.","'Link' is defined but never used.","'DatePicker' is defined but never used.","'HrService' is defined but never used.","'employees' is assigned a value but never used.","'setEmployees' is assigned a value but never used.","'CardActions' is defined but never used.","'API_URL_REQ' is assigned a value but never used."]